version: 2.1

jobs:
  test:
    machine:
      image: ubuntu-2004:current
    environment:
      HELM_VERSION: 3.8.2
      KUBEVAL_VERSION: v0.16.1
      CONFTEST_VERSION: 0.27.0
      K8S_VERSIONS: 1.22.10 1.23.7
      KUBECTL_VERSION: v1.22.10
      KUBECONFIG: /home/circleci/.kube/config
      MINIKUBE_VERSION: v1.25.2
      MINIKUBE_HOME: /home/circleci
      K8S_SCHEMAS: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master
    steps:
      - checkout
      - run:
          name: setup kubectl
          command: |
            curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
            mkdir -p ${HOME}/.kube
            touch ${HOME}/.kube/config
      - run:
          name: setup minikube
          command: |
            curl -Lo minikube https://github.com/kubernetes/minikube/releases/download/${MINIKUBE_VERSION}/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
      - run:
          name: setup helm
          command: curl -SL https://get.helm.sh/helm-v${HELM_VERSION}-linux-amd64.tar.gz | tar xvz -C /tmp && sudo chmod +x /tmp/linux-amd64/* && sudo mv /tmp/linux-amd64/* /usr/local/bin/
      - run:
          name: setup kubeval
          command: |
            curl -L https://github.com/instrumenta/kubeval/releases/download/${KUBEVAL_VERSION}/kubeval-linux-amd64.tar.gz -o kubeval-linux-amd64.tar.gz
            tar xf kubeval-linux-amd64.tar.gz
            sudo mv kubeval /usr/local/bin
      - run:
          name: setup conftest and deprek8ion
          command: |
            curl -SL https://github.com/open-policy-agent/conftest/releases/download/v${CONFTEST_VERSION}/conftest_${CONFTEST_VERSION}_Linux_x86_64.tar.gz -o conftest.tar.gz
            tar xf conftest.tar.gz
            sudo mv conftest /usr/local/bin
            curl https://raw.githubusercontent.com/naquada/deprek8/master/policy/deprek8.rego > deprek8.rego
      - run:
          name: Execute lint on the charts
          command: |
            helm lint ./awx -f examples/awx/values.yaml
            helm lint ./kube-iptables-tailer -f examples/kube-iptables-tailer/values.yaml
            helm lint ./squid -f examples/squid/values.yaml
            helm lint ./looker -f examples/looker/values.yaml
            helm lint ./op-scim-bridge -f examples/op-scim-bridge/values.yaml
      - run:
          name: Execute helm template
          command: |
            helm template ./awx -f examples/awx/values.yaml > awx.yaml
            helm template ./kube-iptables-tailer -f examples/kube-iptables-tailer/values.yaml > kube-iptables-tailer.yaml
            helm template ./squid -f examples/squid/values.yaml > squid.yaml
            helm template ./looker -f examples/looker/values.yaml > looker.yaml
            helm dependency update ./op-scim-bridge/
            helm template ./op-scim-bridge -f examples/op-scim-bridge/values.yaml > op-scim-bridge.yaml
      - run:
          name: Run kubeval on the charts to ensure kubernetes compability
          command: |
            for kv in ${K8S_VERSIONS}
            do
              kubeval -v $kv --strict awx.yaml --schema-location ${K8S_SCHEMAS}
              kubeval -v $kv --strict kube-iptables-tailer.yaml --schema-location ${K8S_SCHEMAS}
              kubeval -v $kv --strict squid.yaml --schema-location ${K8S_SCHEMAS}
              kubeval -v $kv --strict looker.yaml --schema-location ${K8S_SCHEMAS}
              kubeval -v $kv --strict op-scim-bridge.yaml --schema-location ${K8S_SCHEMAS}
            done
      - run:
          name: Run deprek8
          command: |
            conftest test -p deprek8.rego awx.yaml
            conftest test -p deprek8.rego kube-iptables-tailer.yaml
            conftest test -p deprek8.rego squid.yaml
            conftest test -p deprek8.rego looker.yaml
            conftest test -p deprek8.rego op-scim-bridge.yaml
      - run:
          name: start minikube
          command: |
            minikube start --vm-driver=docker --cpus 2 --memory 4000 --network-plugin=cni --cni=calico --kubernetes-version=${KUBECTL_VERSION} &> $HOME/minikube.log 2>&1 < /dev/null
      - run:
          name: debug node
          command: |
            kubectl describe node
      - run:
          name: Setup Cluster
          command: |
            ./scripts/setup_cluster.sh
      - run:
          name: wait for minikube
          command: |
            JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}';
            until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do
              sleep 1;
            done
      # - run:
      #     name: Test awx installation
      #     command: |
      #       kubectl create namespace awx || true
      #       helm upgrade awx ./awx/ --install  --timeout 500s --wait -f examples/awx/values.yaml --kube-context minikube --namespace awx
      - run:
          name: Test kube-iptables-tailer installation
          command: |
            kubectl create namespace kube-iptables-tailer || true
            helm upgrade kube-iptables-tailer ./kube-iptables-tailer/ --install  --timeout 500s --wait -f examples/kube-iptables-tailer/values.yaml --kube-context minikube --namespace kube-iptables-tailer
      - run:
          name: Test squid installation
          command: |
            kubectl create namespace squid || true
            helm upgrade squid ./squid/ --install  --timeout 500s --wait --kube-context minikube --namespace squid
      - run:
          name: Test op-scim installation
          command: |
            kubectl create namespace op-scim || true
            helm dependency update ./op-scim-bridge/
            helm upgrade op-scim ./op-scim-bridge/ --install  --timeout 500s --wait -f examples/op-scim-bridge/values.yaml --kube-context minikube --namespace op-scim
      - run:
          name: Test looker installation
          command: |
            kubectl create namespace looker || true
            kubectl create secret docker-registry dockerhub -n looker --docker-username=$DOCKERHUB_READ_USERNAME --docker-password=$DOCKERHUB_READ_PASSWORD
            helm upgrade looker ./looker/ --install  --timeout 500s --wait --kube-context minikube --namespace looker -f ./examples/looker/values.yaml
      - run:
          name: Debug on failures
          command: |
            cat $HOME/minikube.log
            kubectl get node
            kubectl get pod --all-namespaces
            kubectl describe pod --all-namespaces
            kubectl logs --tail 2000 -lapp.kubernetes.io/instance=looker -n looker
            helm list --all --kube-context minikube --namespace lifen-app-test
          when: on_fail

  release:
    environment:
      HELM_VERSION: 3.8.2
    docker:
      - image: circleci/python:3
    steps:
      - checkout
      - run:
          name: Install helm
          command: |
            curl -SL https://get.helm.sh/helm-v${HELM_VERSION}-linux-amd64.tar.gz | tar xvz -C /tmp && sudo chmod +x /tmp/linux-amd64/* && sudo mv /tmp/linux-amd64/* /usr/local/bin/
      - add_ssh_keys:
          fingerprints:
            - "96:6f:38:13:f5:a6:18:05:d4:0f:b4:0f:f5:62:e5:2b"
      - run:
          name: Package and index doc
          command: |
            git config user.email "ops@lifen.fr"
            git config user.name "Lifen"
            git fetch origin
            git checkout -b release
            git checkout gh-pages
            git merge release  --no-edit
            helm package kube-iptables-tailer -d packages
            helm package awx -d packages
            helm package squid -d packages
            helm package op-scim-bridge -d packages
            helm package looker -d packages
            helm repo index packages --url https://honestica.github.io/lifen-charts/packages
            mv packages/index.yaml index.yaml
            cp packages/artifacthub-repo.yml artifacthub-repo.yml
      - run:
          name: Push to repo
          command: |
            git add packages index.yaml artifacthub-repo.yml
            git commit -m "relase version"
            git push origin gh-pages

workflows:
  version: 2
  build:
    jobs:
      - test:
          filters:
            branches:
              ignore:
                - gh-pages
                - master
          context: org-global
      - release:
          filters:
            branches:
              only: master
              ignore: gh-pages
