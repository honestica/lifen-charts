apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "squid.fullname" . }}
  labels:
    app: {{ template "squid.name" . }}
    chart: {{ template "squid.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "squid.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "squid.name" . }}
        release: {{ .Release.Name }}
        {{- if .Values.podLabels }}
{{ toYaml .Values.podLabels | indent 8 }}
        {{- end }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- if .Values.podAnnotations }}
{{ toYaml .Values.podAnnotations | indent 8 }}
        {{- end }}
    spec:
{{- if .Values.image.imagePullSecrets }}
      imagePullSecrets:
        - name: {{ .Values.image.imagePullSecrets }}
{{- end }}
      initContainers:
        # if there is a line in config map that starts with `cache_dir`
        # run `squid -z` which will create the cache structure on the filesystem
        - name: create-cache-dir
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
          volumeMounts:
          - name: {{ template "squid.fullname" . }}-conf
            mountPath: /etc/squid/squid.conf
            subPath: squid.conf
          - name: cache
            mountPath: /var/cache/squid
          command:
            - /bin/sh
            - -c
          args:
            - |
              set -e
              chown -R squid.squid /var/cache/squid
              chmod 770 /var/cache/squid
              squid -z --foreground 2>&1
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
          - name: http
            containerPort: 3128
            protocol: TCP
          volumeMounts:
          - name: {{ template "squid.fullname" . }}-conf
            mountPath: /etc/squid/squid.conf
            subPath: squid.conf
          - name: cache
            mountPath: /var/cache/squid
        {{- if .Values.configSecret }}
          - name: config-secret
            mountPath: /etc/squid/config
        {{- end }}
        # Load the configuration files for nginx
          livenessProbe:
            tcpSocket:
              port: 3128
            initialDelaySeconds: 5
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 3128
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
{{ toYaml .Values.resources | indent 12 }}
{{- if .Values.metrics.enabled }}
        - name: exporter
          image: "{{ .Values.metrics.exporter.image.repository }}:{{ .Values.metrics.exporter.image.tag }}"
          imagePullPolicy: {{ .Values.metrics.exporter.image.pullPolicy }}
          env:
          - name: SQUID_HOSTNAME
            value: localhost
          - name: SQUID_EXPORTER_LISTEN
            value: ":{{ .Values.metrics.exporter.port }}"
          - name: SQUID_PORT
            value: "3128"
          ports:
          - name: metrics
            containerPort: {{ .Values.metrics.exporter.port }}
            protocol: TCP
          livenessProbe:
            tcpSocket:
              port: {{ .Values.metrics.exporter.port }}
            initialDelaySeconds: 5
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /metrics
              port: metrics
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
{{ toYaml .Values.metrics.exporter.resources | indent 12 }}
{{- end }}
      volumes:
      - name: {{ template "squid.fullname" . }}-conf
        configMap:
          name: {{ template "squid.fullname" . }}-conf
      - emptyDir: {}
        name: cache
    {{- if .Values.configSecret }}
      - name: config-secret
        secret:
          secretName: {{ .Values.configSecret }}
    {{- end }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- if or .Values.releaseAntiAffinity .Values.affinity }}
      affinity:
    {{- end }}
    {{- if .Values.releaseAntiAffinity }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchExpressions:
                - key: release
                  operator: In
                  values:
                  - {{ .Release.Name }}
    {{- end }}
    {{- with .Values.affinity }}
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
